"   Basic Options {{{
"   Because Vundle
set nocompatible     
"   Syntax
syntax on
"   Line Number
set number
"   Auto indentation
set autoindent
set smartindent
"   Tab width
set tabstop=4
"   < > width
set shiftwidth=4 
"   Subs Tabs for Spaces
set expandtab 
"   Show Command
set showcmd
"   No audible bell
set visualbell
set t_vb=
" Omnicomplete
set omnifunc=syntaxcomplete#Complete
" Background Color Erase
if &term =~ '256color'
    set t_ut=
endif
" }}}
"   Plugins {{{
"   Vundle {{{
filetype off            " Because Vundle
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()
Plugin 'gmarik/Vundle.vim'
"}}}
"   Surround {{{
Plugin 'tpope/vim-surround'
 "}}}
"   Endwise {{{
Plugin 'tpope/vim-endwise'
"}}}
" DelimitMate{{{
Plugin 'Raimondi/delimitMate'
" }}}
" Tagbar{{{
Plugin 'majutsushi/tagbar'
" }}}
" A.vim {{{
Plugin 'vim-scripts/a.vim'
" }}}
" CTRL-P {{{
Plugin 'ctrlpvim/ctrlp.vim'
" }}}
" CSCOPE {{{
Plugin 'vim-scripts/cscope.vim'
" }}}
" OmniCPPComplete {{{
Plugin 'vim-scripts/OmniCppComplete'
" }}}
" Experimental{{{
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
set laststatus=2
set noshowmode
Plugin 'itchyny/lightline.vim'
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ }
if !has('gui_running')
  set t_Co=256
endif
Plugin 'octol/vim-cpp-enhanced-highlight'
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
"set ttimeoutlen=10
"Plugin 'justmao945/vim-clang'
"Plugin 'scrooloose/nerdtree'
" }}}
call vundle#end()
"}}}
" Cursor Settings {{{
"   Remember last position {{{
set viminfo='10,\"100,:20,%,n~/.viminfo'
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction
                
augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END
" }}}
" }}}
" Completion {{{
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/sdl
" build tags for custom project Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" OmniCppComplete {{{
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
" }}}
" }}}
" Mappings {{{
"   Tagbar
nmap <leader>t :TagbarToggle<CR>
"   CSCOPE {{{
nnoremap <leader>fa :call cscope#findInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>
" s: Find this C symbol
nnoremap  <leader>fs :call cscope#find('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call cscope#find('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call cscope#find('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call cscope#find('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call cscope#find('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call cscope#find('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call cscope#find('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call cscope#find('i', expand('<cword>'))<CR>
"   }}}
"   Page Selecting
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
"   Expand/Contract Folds
nnoremap <S-Space> zR
nnoremap <Space> za 
"   Paste buffer unaffected by delete
nnoremap z "0p
vnoremap z "0p
"   Maintaining visual selection when indenting
vnoremap > >gv
vnoremap < <gv
"   Clear search buffer
nnoremap <CR> :noh<CR><CR>
" }}}
" File Types {{{
filetype plugin indent on
" C {{{
augroup ft_c
au!
au FileType c setlocal foldmethod=marker foldmarker={,}
au FileType cpp setlocal foldmethod=marker foldmarker={,}
au FileType h setlocal foldmethod=marker foldmarker={,}
augroup END
"}}}
" Vim {{{
augroup ft_vim
au!
au FileType vim setlocal foldmethod=marker

augroup END
"}}}
"}}}
" Color Scheme {{{
    "colorscheme   jellybeans
    "colorscheme metacosm
    "colorscheme golden
    "colorscheme adaryn
    "colorscheme adrian
    "colorscheme seoul256
    colorscheme wombat256
    "colorscheme jellybeans
    "hi Pmenu ctermfg=0 ctermbg=6 guibg=#444444
    "hi PmenuSel ctermfg=7 ctermbg=4 guibg=#555555 guifg=#ffffff
"}}}
"   Search {{{
set incsearch
set hlsearch
set showmatch
"   }}}
"    Experimental {{{
"   set wildmenu
"   set wildmode=list:longest,full
let g:netrw_banner = 0
let g:netrw_liststyle = 3
"   }}}
